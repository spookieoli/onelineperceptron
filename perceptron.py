# Einfache Implementierung eines TLU (Rosenblatt Perzeptron) - Oliver Sharif - 04.Mai.2021

model = (lambda f, d, w, t: f(f, d, [w[0] + (0.001*(d[-1]-(lambda d,w: 1 if ( d[0] * w[0] + d[1] * w[1] + d[2] + w[2] > 0) else 0)(d, w) * d[0])), w[1] + (0.001*(d[-1]-(lambda d,w: 1 if ( d[0] * w[0] + d[1] * w[1] + d[2] + w[2] > 0) else 0)(d, w) * d[1])), w[2] + (0.001*(d[-1]-(lambda d,w: 1 if ( d[0] * w[0] + d[1] * w[1] + d[2] + w[2] > 0) else 0)(d, w) * d[2]))], t-1) if (t > 0) else [w[0] + (0.001*(d[-1]-(lambda d,w: 1 if ( d[0] * w[0] + d[1] * w[1] + d[2] + w[2] > 0) else 0)(d, w) * d[0])), w[1] + (0.001*(d[-1]-(lambda d,w: 1 if ( d[0] * w[0] + d[1] * w[1] + d[2] + w[2] > 0) else 0)(d, w) * d[1])), w[2] + (0.001*(d[-1]-(lambda d,w: 1 if ( d[0] * w[0] + d[1] * w[1] + d[2] + w[2] > 0) else 0)(d, w) * d[2]))])(lambda f, d, w, t: f(f, d, [w[0] + (0.001*(d[-1]-(lambda d,w: 1 if ( d[0] * w[0] + d[1] * w[1] + d[2] + w[2] > 0) else 0)(d, w) * d[0])), w[1] + (0.001*(d[-1]-(lambda d,w: 1 if ( d[0] * w[0] + d[1] * w[1] + d[2] + w[2] > 0) else 0)(d, w) * d[1])), w[2] + (0.001*(d[-1]-(lambda d,w: 1 if ( d[0] * w[0] + d[1] * w[1] + d[2] + w[2] > 0) else 0)(d, w) * d[2]))], t-1) if (t > 0) else [w[0] + (0.001*(d[-1]-(lambda d,w: 1 if ( d[0] * w[0] + d[1] * w[1] + d[2] + w[2] > 0) else 0)(d, w) * d[0])), w[1] + (0.001*(d[-1]-(lambda d,w: 1 if ( d[0] * w[0] + d[1] * w[1] + d[2] + w[2] > 0) else 0)(d, w) * d[1])), w[2] + (0.001*(d[-1]-(lambda d,w: 1 if ( d[0] * w[0] + d[1] * w[1] + d[2] + w[2] > 0) else 0)(d, w) * d[2]))],[1,1,1,1],
(lambda f, d, w, t: f(f, d, [w[0] + (0.001*(d[-1]-(lambda d,w: 1 if ( d[0] * w[0] + d[1] * w[1] + d[2] + w[2] > 0) else 0)(d, w) * d[0])), w[1] + (0.001*(d[-1]-(lambda d,w: 1 if ( d[0] * w[0] + d[1] * w[1] + d[2] + w[2] > 0) else 0)(d, w) * d[1])), w[2] + (0.001*(d[-1]-(lambda d,w: 1 if ( d[0] * w[0] + d[1] * w[1] + d[2] + w[2] > 0) else 0)(d, w) * d[2]))], t-1) if (t > 0) else [w[0] + (0.001*(d[-1]-(lambda d,w: 1 if ( d[0] * w[0] + d[1] * w[1] + d[2] + w[2] > 0) else 0)(d, w) * d[0])), w[1] + (0.001*(d[-1]-(lambda d,w: 1 if ( d[0] * w[0] + d[1] * w[1] + d[2] + w[2] > 0) else 0)(d, w) * d[1])), w[2] + (0.001*(d[-1]-(lambda d,w: 1 if ( d[0] * w[0] + d[1] * w[1] + d[2] + w[2] > 0) else 0)(d, w) * d[2]))])(lambda f, d, w, t: f(f, d, [w[0] + (0.001*(d[-1]-(lambda d,w: 1 if ( d[0] * w[0] + d[1] * w[1] + d[2] + w[2] > 0) else 0)(d, w) * d[0])), w[1] + (0.001*(d[-1]-(lambda d,w: 1 if ( d[0] * w[0] + d[1] * w[1] + d[2] + w[2] > 0) else 0)(d, w) * d[1])), w[2] + (0.001*(d[-1]-(lambda d,w: 1 if ( d[0] * w[0] + d[1] * w[1] + d[2] + w[2] > 0) else 0)(d, w) * d[2]))], t-1) if (t > 0) else [w[0] + (0.001*(d[-1]-(lambda d,w: 1 if ( d[0] * w[0] + d[1] * w[1] + d[2] + w[2] > 0) else 0)(d, w) * d[0])), w[1] + (0.001*(d[-1]-(lambda d,w: 1 if ( d[0] * w[0] + d[1] * w[1] + d[2] + w[2] > 0) else 0)(d, w) * d[1])), w[2] + (0.001*(d[-1]-(lambda d,w: 1 if ( d[0] * w[0] + d[1] * w[1] + d[2] + w[2] > 0) else 0)(d, w) * d[2]))],[1,1,0,1],
(lambda f, d, w, t: f(f, d, [w[0] + (0.001*(d[-1]-(lambda d,w: 1 if ( d[0] * w[0] + d[1] * w[1] + d[2] + w[2] > 0) else 0)(d, w) * d[0])), w[1] + (0.001*(d[-1]-(lambda d,w: 1 if ( d[0] * w[0] + d[1] * w[1] + d[2] + w[2] > 0) else 0)(d, w) * d[1])), w[2] + (0.001*(d[-1]-(lambda d,w: 1 if ( d[0] * w[0] + d[1] * w[1] + d[2] + w[2] > 0) else 0)(d, w) * d[2]))], t-1) if (t > 0) else [w[0] + (0.001*(d[-1]-(lambda d,w: 1 if ( d[0] * w[0] + d[1] * w[1] + d[2] + w[2] > 0) else 0)(d, w) * d[0])), w[1] + (0.001*(d[-1]-(lambda d,w: 1 if ( d[0] * w[0] + d[1] * w[1] + d[2] + w[2] > 0) else 0)(d, w) * d[1])), w[2] + (0.001*(d[-1]-(lambda d,w: 1 if ( d[0] * w[0] + d[1] * w[1] + d[2] + w[2] > 0) else 0)(d, w) * d[2]))])(lambda f, d, w, t: f(f, d, [w[0] + (0.001*(d[-1]-(lambda d,w: 1 if ( d[0] * w[0] + d[1] * w[1] + d[2] + w[2] > 0) else 0)(d, w) * d[0])), w[1] + (0.001*(d[-1]-(lambda d,w: 1 if ( d[0] * w[0] + d[1] * w[1] + d[2] + w[2] > 0) else 0)(d, w) * d[1])), w[2] + (0.001*(d[-1]-(lambda d,w: 1 if ( d[0] * w[0] + d[1] * w[1] + d[2] + w[2] > 0) else 0)(d, w) * d[2]))], t-1) if (t > 0) else [w[0] + (0.001*(d[-1]-(lambda d,w: 1 if ( d[0] * w[0] + d[1] * w[1] + d[2] + w[2] > 0) else 0)(d, w) * d[0])), w[1] + (0.001*(d[-1]-(lambda d,w: 1 if ( d[0] * w[0] + d[1] * w[1] + d[2] + w[2] > 0) else 0)(d, w) * d[1])), w[2] + (0.001*(d[-1]-(lambda d,w: 1 if ( d[0] * w[0] + d[1] * w[1] + d[2] + w[2] > 0) else 0)(d, w) * d[2]))],[1,0,1,1],
(lambda f, d, w, t: f(f, d, [w[0] + (0.001*(d[-1]-(lambda d,w: 1 if ( d[0] * w[0] + d[1] * w[1] + d[2] + w[2] > 0) else 0)(d, w) * d[0])), w[1] + (0.001*(d[-1]-(lambda d,w: 1 if ( d[0] * w[0] + d[1] * w[1] + d[2] + w[2] > 0) else 0)(d, w) * d[1])), w[2] + (0.001*(d[-1]-(lambda d,w: 1 if ( d[0] * w[0] + d[1] * w[1] + d[2] + w[2] > 0) else 0)(d, w) * d[2]))], t-1) if (t > 0) else [w[0] + (0.001*(d[-1]-(lambda d,w: 1 if ( d[0] * w[0] + d[1] * w[1] + d[2] + w[2] > 0) else 0)(d, w) * d[0])), w[1] + (0.001*(d[-1]-(lambda d,w: 1 if ( d[0] * w[0] + d[1] * w[1] + d[2] + w[2] > 0) else 0)(d, w) * d[1])), w[2] + (0.001*(d[-1]-(lambda d,w: 1 if ( d[0] * w[0] + d[1] * w[1] + d[2] + w[2] > 0) else 0)(d, w) * d[2]))])(lambda f, d, w, t: f(f, d, [w[0] + (0.001*(d[-1]-(lambda d,w: 1 if ( d[0] * w[0] + d[1] * w[1] + d[2] + w[2] > 0) else 0)(d, w) * d[0])), w[1] + (0.001*(d[-1]-(lambda d,w: 1 if ( d[0] * w[0] + d[1] * w[1] + d[2] + w[2] > 0) else 0)(d, w) * d[1])), w[2] + (0.001*(d[-1]-(lambda d,w: 1 if ( d[0] * w[0] + d[1] * w[1] + d[2] + w[2] > 0) else 0)(d, w) * d[2]))], t-1) if (t > 0) else [w[0] + (0.001*(d[-1]-(lambda d,w: 1 if ( d[0] * w[0] + d[1] * w[1] + d[2] + w[2] > 0) else 0)(d, w) * d[0])), w[1] + (0.001*(d[-1]-(lambda d,w: 1 if ( d[0] * w[0] + d[1] * w[1] + d[2] + w[2] > 0) else 0)(d, w) * d[1])), w[2] + (0.001*(d[-1]-(lambda d,w: 1 if ( d[0] * w[0] + d[1] * w[1] + d[2] + w[2] > 0) else 0)(d, w) * d[2]))], [1,0,0,0],[.0001000005444235, .50100304242, -.2000003343434], 1000), 1000) ,1000), 1000)

print("Logisches ODER:")
print("1,1:", True if (model[0] * [1,1,1,1][0] + model[1] * [1,1,1,1][1] + model[2] * [1,1,1,1][2] >= 0.001) else False)
print("1,0:", True if (model[0] * [1,1,0,1][0] + model[1] * [1,1,0,1][1] + model[2] * [1,1,0,1][2] >= 0.001) else False)
print("0,1:", True if (model[0] * [1,0,1,1][0] + model[1] * [1,0,1,1][1] + model[2] * [1,0,1,1][2] >= 0.001) else False)
print("0,0:", True if (model[0] * [1,0,0,0][0] + model[1] * [1,0,0,0][1] + model[2] * [1,0,0,0][2] >= 0.001) else False)
